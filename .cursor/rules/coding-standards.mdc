---
description: 
globs: 
alwaysApply: true
---
# Todo List API - Coding Standards & Best Practices

## Go Language Standards

### Code Formatting
- Use `gofmt` or `goimports` for consistent formatting
- Follow standard Go naming conventions:
  - **Packages**: Short, lowercase, single words
  - **Variables**: camelCase (e.g., `dbInstance`, `connStr`)
  - **Constants**: CamelCase or UPPER_CASE for exported constants
  - **Functions**: CamelCase for exported, camelCase for unexported

### Function Design Patterns

#### Handler Pattern (from [internal/server/routes.go](mdc:internal/server/routes.go))
```go
func (s *Server) HandlerName(w http.ResponseWriter, r *http.Request) {
    // 1. Parse request/validate input
    // 2. Process business logic
    // 3. Handle errors appropriately
    // 4. Return JSON response with proper headers
}
```

#### Service Interface Pattern (from [internal/database/database.go](mdc:internal/database/database.go))
```go
type Service interface {
    Health() map[string]string
    Close() error
    // Add new methods here for database operations
}
```

## HTTP API Conventions

### Response Format Standards
- **Success Responses**: JSON with appropriate HTTP status codes
- **Error Responses**: Consistent error format with proper status codes
- **Headers**: Always set `Content-Type: application/json` for JSON responses

### CORS Configuration
CORS middleware in [internal/server/routes.go](mdc:internal/server/routes.go) allows:
- Origins: `*` (configure specific origins for production)
- Methods: `GET, POST, PUT, DELETE, OPTIONS, PATCH`
- Headers: `Accept, Authorization, Content-Type, X-CSRF-Token`

### URL Pattern Standards
- Use RESTful conventions:
  - `GET /todos` - List all todos
  - `GET /todos/{id}` - Get specific todo
  - `POST /todos` - Create new todo
  - `PUT /todos/{id}` - Update todo
  - `DELETE /todos/{id}` - Delete todo

## Database Best Practices

### Connection Management
- Use singleton pattern for database service (see [internal/database/database.go](mdc:internal/database/database.go))
- Implement proper connection pooling
- Always use context with timeouts for database operations
- Handle connection errors gracefully

### Query Patterns
```go
ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
defer cancel()

// Execute query with context
err := s.db.QueryRowContext(ctx, query, args...).Scan(&result)
```

### Transaction Handling
- Use database transactions for operations that modify multiple records
- Always defer rollback and handle commit properly

## Error Handling Standards

### HTTP Error Response Pattern
```go
if err != nil {
    http.Error(w, "Error message", http.StatusInternalServerError)
    return
}
```

### Logging Standards
- Log errors with context: `log.Printf("Operation failed: %v", err)`
- Log important events: startup, shutdown, health checks
- Don't log sensitive information (passwords, tokens)

## Testing Standards

### Test File Organization
- Place tests in same package as code being tested
- Use `*_test.go` naming convention
- Separate unit tests and integration tests

### Integration Test Pattern (from [internal/database/database_test.go](mdc:internal/database/database_test.go))
```go
func TestDatabaseIntegration(t *testing.T) {
    // 1. Setup testcontainers
    // 2. Initialize service
    // 3. Run test operations
    // 4. Cleanup resources
}
```

### Test Environment Variables
Use testcontainers for consistent test environments instead of requiring local database setup.

## Environment Configuration

### Required Environment Variables
```bash
# Database Configuration
BLUEPRINT_DB_HOST=localhost
BLUEPRINT_DB_PORT=5432
BLUEPRINT_DB_DATABASE=todo_db
BLUEPRINT_DB_USERNAME=user
BLUEPRINT_DB_PASSWORD=password
BLUEPRINT_DB_SCHEMA=public

# Server Configuration
PORT=8080
```

### Development vs Production
- Use `.env` files for local development
- Use container environment variables for production
- Never commit sensitive values to version control

## Performance Guidelines

### Database Performance
- Use connection pooling (configured in [internal/database/database.go](mdc:internal/database/database.go))
- Monitor connection statistics via health endpoint
- Implement proper database indexes for query performance

### HTTP Performance
- Set appropriate timeouts (see [internal/server/server.go](mdc:internal/server/server.go)):
  - `IdleTimeout: time.Minute`
  - `ReadTimeout: 10 * time.Second`
  - `WriteTimeout: 30 * time.Second`

## Security Best Practices

### Input Validation
- Validate all user inputs before processing
- Use parameterized queries to prevent SQL injection
- Sanitize data before storing in database

### CORS Security
- Configure specific origins instead of `*` for production
- Limit allowed methods to only what's needed
- Consider authentication headers in CORS configuration

### Error Information
- Don't expose internal error details to clients
- Log detailed errors server-side for debugging
- Return generic error messages to clients

## Development Workflow Standards

### Code Review Checklist
1. **Functionality**: Does the code work as intended?
2. **Error Handling**: Are all errors properly handled?
3. **Testing**: Are there appropriate tests?
4. **Performance**: Are there any performance concerns?
5. **Security**: Are there any security vulnerabilities?
6. **Documentation**: Is the code self-documenting?

### Git Commit Standards
- Use clear, descriptive commit messages
- Keep commits focused on single changes
- Include tests with feature commits

### Development Commands (from [justfile](mdc:justfile))
- Use `just dev` for development with hot reload
- Use `just test` before committing changes
- Use `just ci` for full build and test validation

## Documentation Standards

### Code Comments
- Add comments for complex business logic
- Document public interfaces and exported functions
- Explain non-obvious implementation decisions

### API Documentation
- Document all endpoints with expected request/response formats
- Include error scenarios and status codes
- Update documentation when adding new endpoints
